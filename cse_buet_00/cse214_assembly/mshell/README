Send bug report to Ayub <mrayub@gmail.com>
I'm not maintaining it anyway, but you may email me just to notify me;
may be I'll fix it if I get time.

Note that this program has been developed as a class [week] assignment,
and I didn't get much time for making it better.

TODO:
	* Document sources
	* [???]


Released under the GPL [any version]

Operating system:
	UNIX/Linux [developed on Linux]





		MINISHELL (mshell) COMMAND REFERENCE MANUAL

	Command Summary:

MESSAGE:
	In all cases, you can use absolute or relative path names
	for files or directories.

	Typing 'exit' and pressing Ctrl-d are equivalent.

1. cd - Changes current working directory.

	cd <dir>

2. chmod - Changes permission mode of file or directory
		'mode' is in decimal [777(hex) = 511(dec)] [quick and dirty]


	chmod <mode> <file/dir>

3. cp - Copy file

	cp <src> <dest>

4. create - Creates file

	create <file>

5. exit - Exit to system (shell)

	exit

6. find - Finds file

	find <file>		[wildcard is allowed <*end>]

	This command searches the current directory for filenames
	ending with <file> (or <end> if wildcard is used). Wildcard must
	be the starting character.

7. ls - Lists files and directories inside a directory

	ls [dir]

	'dir' is optional. If you don't enter anything as directory name,
	this command will display current directory listing. If you enter
	directory name, you must supply the trailing slash '/' character.
	If you don't supply the trailing slash, this command will display
	only the name of the inodes staying inside that directory.

8. mkdir - Makes directory

	mkdir <dir>

9. mv - Moves (renames) file

	mv <old> <new>

	Both <old> and <new> must be in the same partition.

10. rmdir - Removes directory

	rmdir <dir>

	<dir> must be empty directory.

11. rm - Removes file

	rm <file>

12. touch - Updates modification time of an inode

	touch <file/dir>














		MINISHELL COMMAND REFERENCE MANUAL

	Copyright (C) Ayub <mrayub@gmail.com>

1. cd - Change current directory

	cd <dir>

	The 'cd' command changes the current working directory to <dir>.
	If you don't have entering (execute) permission to that directory
	this command will fail.

2. chmod - Change permission of a file or directory

	chmod <mode> <file/dir>

	The 'chmod' command changes permission modes of a file
	or directory.

	'mode' is a number which states permissions modes of that file.
	'mode' must be from '0' to '511' (dec) or '0777' (oct).

	This version can only handle decimal value. You must enter mode
	value as decimal equivalent of the original octal number.

	The three octal digits stands for user, group and others permission
	respectively. Each permission has a specific value:

		PERMISSION			VALUE
		   Read				  4
		   Write			  2
		  Execute			  1
	There is also a bit named 'sticky bit' in UNIX systems.
	But I'm not using it here in this project right now.
	It may be added to the next version.

	The following combinations of 'mode' are possible:

		MODE				VALUE
		Read Only			  4
		Write Only			  2
		Execute Only			  1
		Read + Write			  6	[4+2]
		Read + Execute			  5	[4+1]
		Write + Execute			  3	[2+1]
		Read + Write + Execute		  7	[4+2+1]

	The first octal digit in the mode is used for user, second is used
	for group, and the third is used for others.

		-------------------
		|user|group|others|
		-------------------

		      [7 6 5]
	For example, a value of 765 (oct) as 'mode' value states that,
	user has 'read+write+execute' permission (7), group has 'read+
	write' permission (6), others have 'read+execute' permission (5)
	to that file. In the case of directory, 'execute' is equivalent
	to 'enter'. Here I'm showing this mode value in octal number.
	But I haven't written any conversion function for converting
	an octal number to decimal number in assembly. So, user will have
	to convert the octal number to equivalent decimal value and then
	enter that decimal number as 'mode'. You can convert it easily using
	the calculator program available in your OS.

	<file/dir> is the name of the file or directory you want to apply
	the mode argument to.


3. cp - Copy file

	cp <src> <dest>

	Copies <src> file to <dest> file.
	<src> must be a file name (not a directory). Otherwise, an empty
	file named <dest> will be created.

[to be continued...]
